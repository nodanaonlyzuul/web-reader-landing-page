#!/usr/bin/env python
"""Generate HTML for the landing page based on a spreadsheet of book titles and age classifications."""
import os
import sys
bin_dir = os.path.split(__file__)[0]
package_dir = os.path.join(bin_dir, "..")
sys.path.append(os.path.abspath(package_dir))

import csv
import re
from core.scripts import Script
from core.model import (
    DataSource,
    Edition,
    Hyperlink,
    Representation,
)

FEATURED_TITLES = ["A Christmas Carol", "Alice's Adventures in Wonderland", "The Adventures of Sherlock Holmes"]
TITLE_HEADER = "Final List"
AGE_HEADER = "Age"
MIN_AGE_RE = re.compile(".*Age\s(\d+).*", re.I)
DATA_SOURCES = [DataSource.STANDARD_EBOOKS, DataSource.PLYMPTON]
TEMPLATE = os.path.join(package_dir, "index.html.template")
OUTPUT_FILE = os.path.join(package_dir, "index.html")

class GenerateLandingPageScript(Script):

      def __init__(self, csv_file, _db=None):
          self.csv_file = csv_file
          super(GenerateLandingPageScript, self).__init__(_db)

      def run(self):
          adult_html = []
          children_html = []
          featured_html = []

          with open(csv_file) as file:
              reader = csv.DictReader(file)

              for row in reader:
                  title = unicode(row.get(TITLE_HEADER))
                  age = row.get(AGE_HEADER)

                  adult = True

                  min_age_match = MIN_AGE_RE.match(age)
                  if min_age_match:
                      min_age = min_age_match.groups()[0]
                      if min_age and int(min_age) < 13:
                          adult = False
                  else:
                      print "Could not find age range for %s" % title

                  editions = self._db.query(Edition).filter(Edition.title==title).all()
                  best_edition = None
                  for edition in editions:
                      source = edition.data_source.name
                      if source in DATA_SOURCES:
                          if not best_edition or DATA_SOURCES.index(source) < DATA_SOURCES.index(best_edition.data_source.name):
                              best_edition = edition

                  if not best_edition:
                      print "Could not find edition for %s" % title
                      continue

                  links = best_edition.license_pool.links
                  cover_links = [link for link in links if link.rel == Hyperlink.IMAGE]
                  if len(cover_links) < 1:
                      print "Could not find cover for %s" % title
                      continue

                  thumbnails = cover_links[0].resource.representation.thumbnails
                  if len(thumbnails) < 1:
                      print "Could not find thumbnail for %s" % title
                      continue
                  cover = thumbnails[0].url

                  download_links = [link for link in links if link.rel == Hyperlink.OPEN_ACCESS_DOWNLOAD]
                  download = None
                  for link in download_links:
                      representation = link.resource.representation
                      if representation.media_type == Representation.EPUB_MEDIA_TYPE:
                          download = representation.url
                          break

                  if not download:
                      print "Could not find epub link for %s" % title
                  file_name = download.split("/")[-1]

                  book_html = """
                  <a href="books/%(file_name)s/index.html" title="%(title)s" class="%(class)s">
                    <img src="%(cover)s" alt="%(title)s" />
                  </a>
                  """ % { 
                      "title": title,
                      "cover": cover,
                      "file_name": file_name,
                      "class": "adult" if adult else ""
                  }

                  if adult:
                      adult_html += book_html
                  else:
                      children_html += book_html

                  if title in FEATURED_TITLES:
                      featured_html += book_html

          with open(TEMPLATE) as template_file:
              template = template_file.read()
              all_books_html = "".join(children_html) + "".join(adult_html)
              featured_books_html = "".join(featured_html)
              out = template.replace("{{all_books}}", all_books_html).replace("{{featured_books}}", featured_books_html)

              with open(OUTPUT_FILE, 'w') as output_file:
                  output_file.write(out)


if len(sys.argv) < 2:
   raise Exception("Usage: bin/generate_landing_page <csv_file>")

csv_file = sys.argv[1]
GenerateLandingPageScript(csv_file).run()

